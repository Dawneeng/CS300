Welcome to the course planner.
1. Load Data Structure.
2. Print Course List.
3. Print Course.
9. Exit
What would you like to do? 8
8 is not a valid option.
1. Load Data Structure.
2. Print Course List.
3. Print Course.
9. Exit
What would you like to do? 2
Here is a sample schedule:
CSCI100, Introduction to Computer Science
CSCI101, Introduction to Programming in C++
CSCI200, Data Structures
CSCI301, Advanced Programming in C++
CSCI300, Introduction to Algorithms
CSCI350, Operating Systems
CSCI400, Large Software Development
MATH201, Discrete Mathematics
1. Load Data Structure.
2. Print Course List.
3. Print Course.
9. Exit
What would you like to do? 3
What course do you want to know about? csci400
CSCI400, Large Software Development
Prerequisites: CSCI301, CSCI350
1. Load Data Structure.
2. Print Course List.
3. Print Course.
9. Exit
What would you like to do? 4
Thank you for using the course planner!
*******************************************************************************/
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <locale>         // std::locale, std::tolower

#define DELIM   ','

using namespace std;

typedef struct coursedata
{
  	string courseNum;
  	string courseTitle;
  	string prereqNum1 = "";
  	string prereqNum2 = "";   // assumtion no more than 2 prereqs
} CourseData;

//function prototypes
void load(vector<CourseData> &courseVec);
void printCourseList(vector<CourseData> courseVec);
void printCourse(vector<CourseData> courseVec);
string removeSpaces(string str);
string lowerStr(string str);

//function definitions
void load(vector<CourseData> &courseVec)  // loads data from file
{
    string filename;
    string cNum;
  	string cTitle;
  	string prNum1;
  	string prNum2;
  	ifstream in1;               // this is used for reading files
    string line;                // this initializes line
    string x = "";              // this creates an empty string x
    
    cout << "Enter the filename to load Data Structure: ";
    cin >> filename;
    cin.ignore();
    
    in1.open (filename);        // this opens the file 
    
    // this checks to see if the file fails to open. If the 
    // file can not be opened, the user is notified. 
    if (in1.fail () == true) {
        cout << "Could not open file." << endl;
        exit(-1);  // program terminates, normal termination = 0, -1 indicates this is error.
    }
    cout << "Successfully opened the file" << endl;
    
    int col_flag = 1;
    int n=0;
    int ntest;
    int delimCount;
    int prereqCount;
    int courseCount = 0;
    while (getline(in1, line)) {  // line by line reading through file
        x = "";             
        col_flag = 1;            // column
        // delimCount = 0;          // how many variables are there
        // prereqCount = 0;
        line = removeSpaces(line);  // remove unessisary spaces after comma
        /*for (int i = 0; line[i] != '\0'; i++) {
            if (line[i] == DELIM)
                delimCount++;     // determines how many prereq there are
        }
        prereqCount = delimCount - 1; */
        
        for (int i = 0; i < line.length(); i++) {
	        if (line[i] != DELIM)
	            x += line[i];       // files data until delim encountered
	        if ((line[i] == DELIM || i == line.length()-1) && col_flag == 4) {
	            prNum2 = x;
	            x = "";
	            col_flag = 1;
	            break;
	        }
	        if ((line[i] == DELIM || i == line.length()-1) && col_flag == 3) {
	            prNum1 = x;
	            x = "";
	            col_flag++;
	        }
	        if ((line[i] == DELIM || i == line.length()-1) && col_flag == 2) {
	            cTitle = x;
	            x = "";
	            col_flag++;
	        }
	        if (line[i] == DELIM && col_flag == 1) {
	            cNum = x;
	            x = "";
	            col_flag++;
	        }
	    }
        courseCount++;
    
        CourseData *coursePtr = new CourseData;  // defines pointer through structre
        coursePtr->courseNum = cNum;  // 4 fields cNum, cTitle, prNum1, prNum2
        coursePtr->courseTitle = cTitle;
        coursePtr->prereqNum1 = prNum1;
        coursePtr->prereqNum2 = prNum2;
        courseVec.push_back(*coursePtr);  // inserts into vector
        
        //delete score;
        delete coursePtr;
    }
    in1.close();  // file closed
    cout << courseCount << " courses loaded to the Data Structure." << endl;
}

void printCourseList(vector<CourseData> courseVec) // option 2, print course list
{
    cout << endl << "List of Courses:" << endl;
    
    for (int i = 0; i < courseVec.size(); i++) { //ideates through entire vector
        cout << courseVec[i].courseNum << ", ";
        cout << courseVec[i].courseTitle << endl;
    }
    cout << endl;
}

void printCourse(vector<CourseData> courseVec)
{
    string cNum;
    
    cout << "What course do you want to know about? ";
    cin >> cNum;
    cin.ignore();
    
    cNum = lowerStr(cNum);  // convert to lower case stream
    
    for (int i = 0; i < courseVec.size(); i++) {  
        if (lowerStr(courseVec[i].courseNum) == cNum) { // cNum entered by user
            cout << courseVec[i].courseNum << ", ";  
            cout << courseVec[i].courseTitle << endl;
            if (courseVec[i].prereqNum1 != "")  // if prereq1
                cout << "Prerequisites: " << courseVec[i].prereqNum1;
            if (courseVec[i].prereqNum2 != "")
                cout << ", " << courseVec[i].prereqNum2;
            cout << endl;  
        }
        
    }
}

string removeSpaces(string str)
{
    int count = 0;
    string temp = "";
    
    for (int i = 0; i < str.length(); i++) {
        if (!(str[i] == ' ' && str[i-1] == ',')) {  // remove spaces that follow comma
            temp = temp + str[i];
            count++;
        }
    }
    return temp;
}

string lowerStr(string str)
{
    locale loc;
    string temp = "";

    for (auto elem : str)
        temp = temp + tolower(elem,loc);
    
    return temp;
}

int main(void)
{
    int choice;
    vector<CourseData> courseVec;  // vector of courseData
    
    cout << "Welcome to the course planner." << endl;
    do {
        cout << endl << "1. Load Data Structure." << endl;
        cout << "2. Print Course List." << endl;
        cout << "3. Print Course." << endl;
        cout << "4. Exit" << endl;
        cout << "What would you like to do? ";
        cin >> choice;   // ask user choice 
        cin.ignore();
        
        switch (choice) {
            case 1:     load(courseVec);
                        break;
                    
            case 2:     printCourseList(courseVec);
                        break;
                        
            case 3:     printCourse(courseVec);  // prints specific course
                        break;
                        
            case 4:     break;
        }
        
        if (!(choice >= 1 && choice <= 4))  // if choice not out of 1-4, not valid option
            cout << choice << " is not a valid option." << endl;
    } while (choice >= 1 && choice <= 3);   // loop continues as long as 1, 2, 3

    cout << "Thank you for using the course planner!" << endl;
    return 0;
}

Â¬--
Input.txt

MATH201, Discrete Mathematics
CSCI300, Introduction to Algorithms, CSCI200, MATH201
CSCI350, Operating Systems, CSCI300
CSCI101, Introduction to Programming in C++, CSCI100
CSCI100, Introduction to Computer Science
CSCI301, Advanced Programming in C++, CSCI101
CSCI400, Large Software Development, CSCI301, CSCI350
